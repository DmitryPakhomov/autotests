Стандарты "кодирования"(coding) RKO

**Источники**
1. PEP8(https://www.python.org/dev/peps/pep-0008/)
2. Соглашение о докстрингах - Docstring Conventions(https://www.python.org/dev/peps/pep-0257/)

**Общие положения**
В целом, нужно придерживаться рекомендаций изложенных в источниках и ориентироваться на них как на первую инстанцию, а в этом документе агрегированы часто используемые правила.
Мы пишем докстринги во всех объявлениях классов, во всех определяемых нами методах, с кратким описанием что делает метод или что представляет из себя класс. Докстринг метода полезно дополнять передаваемыми параметрами(конструкции `:param arg: что-то`) и типом возвращаемого значения, даже если, кода будет меньше чем докстрингов, однако к написанию докстрингов нужно подходить без фанатизма(по возможности краткое описание, параметры и вывод).

**Рекоммендации по оформлению кода**

****Строки****
Строки мы обрамляем в одинарные кавычки `'`, plain-sql - в двойные `"`. Докстринги пишем в двойных кавычках `"""`. Если в строке необходимо передать `'`, то обрамняем строку не `'` а '"'.

****Вертикальное выравнивание при переносах****
Согласно DCS предпочтительная запись вертикального выравнивания при переносах
raise AttributeError(
    'Here is a multine error message '
    'shortened for clarity.'
)
вместо
raise AttributeError('Here is a multine error message '
                     'shortened for clarity.')

****возвращаемое значение****
Функции(методы) должны возвращать значение явно, кроме случаем что им нечего возвращать, например, такой код
def func(param):
    if param:
        return 1
    else:
        return 0
можно и нужно переписать в вид с явным возвратом значения, так
def func(param):
    if param:
        return 1
    return 0

****Обращение с None в ветвлениях и assert-сравнениях****
assert Command().handle('all') is None
вместо
assert Command().handle('all') == None

****Булевые значения в ветвлении***
if cat['is_hidden']:
вместо
if cat['is_hidden'] == True:
и
if not cat['is_hidden']:
вместо
if cat['is_hidden'] == False:

****Словари****
Между ключом и значением после : ставить пробел.

****Конец файла****
В конце файла одна пустая строка - частая ошибка, которая запросто решается средствами IDE.

****Объявление переменных****
При присваивании значения переменной, = нужно обрамлять пробелами, так
var = 'value'
У нескольких переменных стоящих рядом можно позиционировать = так, чтобы он был в линию, так
var1   = 1
var10  = 10
var100 = 100
Однако это выглядит дико в таком примере:
var1                                                                                        = 1
var10                                                                                       = 10
var100                                                                                      = 100
very_very_long_variable_in_our_example_with_any_value_that_show_you_not_better_way_of_write = 1
потому, либо используйте этот приём без фанатизма, либо полностью от него откажитесь.

****Именование переменных****
Мы используем оба основных стиля именования и camel-case(НапримерТакоеИмя) и under-score(вот_пример_такого_имени), однако с замечаниями.
Классы всегда именуем в camel-case формате.
Переменные именуем в under-score формате и её название должно быть существительным, например, какая_то_штука.
Методы и функции именуем в under-score формате и их названия должны выражать действия(например, яркие представители - всевозможные геттеры/сеттеры и другие действия, например, get_page, get_template_name, email_me).

****Класс****
Структура класса, согласно DCS. Если какого-то элемента в структуре класса нет, то просто пропускаем:
1. все поля класса или модели, однострочные свойства
2. кастомные менеджеры запросов, атрибуты
3. class Meta
4. один из методов представлений: __str__() and __unicode__()
5. любые другие методы.

****Комментарии****
Все комментарии, что не относятся к докстрингам или пояснению кода, например, устаревший код, должны быть удалены из проекта(если возникнет необходимость этот код восстановить - гит может показать этот код)

